/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2012 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_TERRAIN_H
#define OSGEARTH_TERRAIN_H 1

#include <osgEarth/Common>
#include <osgEarth/TileKey>
#include <osgEarth/ThreadingUtils>
#include <osg/OperationThread>

namespace osgEarth
{
    class Terrain;
    class SpatialReference;

    /**
     * This object is passed to terrain callbacks to provide context information
     * and a feedback interface to terrain callback consumers.
     */
    class TerrainCallbackContext
    {
    public:
        /** Gets the client data that was used to register this callback */
        osg::Referenced* getClientData() { return _cd; }

        const Terrain* getTerrain() const { return _terrain; }

        /** Indicate that the callback should be removed immediately */
        void remove() { _remove = true; }

        /** whether the user called remove(). */
        bool markedForRemoval() const { return _remove; }

        
    public:
        TerrainCallbackContext(Terrain* terrain, osg::Referenced* cd)
            : _remove(false), _cd(cd), _terrain(terrain) { }

        /** dtor */
        virtual ~TerrainCallbackContext() { }

    protected:
        bool _remove;
        osg::Referenced* _cd;
        Terrain* _terrain;
        friend class Terrain;
    };


    /**
     * Callback that you can register with the Terrain in order to receive
     * update messaged about the terrain scene graph.
     */
    class TerrainCallback : public osg::Referenced
    {
    public:
        /**
         * A tile was added to the terrain graph.
         * @param key
         *      Tile key of the new tile, including the geographic extents
         * @param tile
         *      Geometry of the new tile
         * @param context
         *      Contextual information about the callback
         */
        virtual void onTileAdded(
            const TileKey&          key, 
            osg::Node*              tile, 
            TerrainCallbackContext& context) =0;

        /** dtor */
        virtual ~TerrainCallback() { }
    };


    /**
     * Services for interacting with the live terrain graph. This differs from
     * the Map model; Map represents the parametric data backing the terrain, 
     * while Terrain represents the actual geometry in memory.
     *
     * All returned map coordinate values are in the units conveyed in the
     * spatial reference at getSRS().
     */
    class OSGEARTH_EXPORT Terrain : public osg::Referenced
    {
    public:
        /**
         * Gets the profile of the map with which this terrain is associated.
         */
        const Profile* getProfile() const { return _profile.get(); }

        /**
         * Gets the spatial reference of the map with which this terrain is
         * associated.
         */
        const SpatialReference* getSRS() const { return _profile->getSRS(); }

        /**
         * Whether the terrain is in geocentric (ECEF) coordinates
         */
        bool isGeocentric() const { return _geocentric; }


    public: // Intersection Utilities

        /**
         * Intersects the terrain at the map location x, y and returns the height data.
         *
         * @param mapX, mapY
         *      Map coordinates at which to query the height
         * @param out_heightAboveMSL
         *      The resulting relative height goes here. The height is relative to MSL
         *      (mean sea level) as expressed by the map's vertical datum.
         * @param out_heightAboveEllipsoid
         *      The resulting geodetic height goes here. The height is relative to the
         *      geodetic ellipsoid expressed by the map's SRS.
         * @param patch (optional)
         *      If you want to query just a specific terrain path, instead of the entire
         *      terrain, specify it here.
         */
        bool getHeight(
            double     mapX,
            double     mapY,
            double*    out_heightAboveMSL,
            double*    out_heightAboveEllipsoid =0L,
            osg::Node* patch                    =0L) const;
        
        /**
         * Same as above, but you pass in an SRS describing the x,y coords.
         */
        bool getHeight(
            const SpatialReference* srs,
            double                  x,
            double                  y,
            double*                 out_heightAboveMSL,
            double*                 out_heightAboveEllipsoid =0L,
            osg::Node*              patch                    =0L) const;

        /**
         * Returns the world coordinates under the mouse.
         * @param view
         *      View in which to do the query
         * @param mx, my
         *      Mouse coordinates
         * @param out_coords 
         *      Stores the world coordinates under the mouse (when returning true)
         */
        bool getWorldCoordsUnderMouse(
            osg::View*  view,
            float       mx,
            float       my,
            osg::Vec3d& out_world ) const;

    public:
        /**
         * Adds a terrain callback.
         *
         * @param callback
         *      Terrain callback to add. This will get called whenever tile data changes in
         *      the active terrain graph
         * @param clientData
         *      User-specified client data structure that will be passed to the callback.
         *      If you specify client data, it is held with an observer_ptr. When that observer_ptr
         *      detects that the client data has been deleted, the callback is automatically
         *      removed.
         */
        void addTerrainCallback( TerrainCallback* callback, osg::Referenced* clientData =0L );

        /**
         * Removes a terrain callback.
         */
        void removeTerrainCallback( TerrainCallback* callback );

        /**
         * Removes any terrain callbacks referencing the specified client data.
         *
         * @param clientData
         *      User object for which to remove any callbacks
         */
        void removeTerrainCallbacksWithClientData( osg::Referenced* clientData );
        

    public:

        // access the raw terrain graph
        osg::Node* getGraph() { return _graph.get(); }

        // internal record of a callback registration
        struct CallbackRecord {
            bool                               _hasClientData;
            osg::observer_ptr<osg::Referenced> _clientData;
            osg::ref_ptr<TerrainCallback>      _callback;
        };
        
        // queues the onTileAdded callback (internal)
        void notifyTileAdded( const TileKey& key, osg::Node* tile );
        // fires the onTileAdded callback (internal)
        void fireTileAdded( const TileKey& key, osg::Node* tile );

        /** dtor */
        virtual ~Terrain() { }

    private:
        Terrain( osg::Node* graph, const Profile* profile, bool geocentric );

        friend class TerrainEngineNode;

        typedef std::list<CallbackRecord> CallbackList;

        CallbackList                 _callbacks;
        Threading::ReadWriteMutex    _callbacksMutex;
        osg::ref_ptr<const Profile>  _profile;
        osg::observer_ptr<osg::Node> _graph;
        bool                         _geocentric;

        osg::observer_ptr<osg::OperationQueue> _updateOperationQueue;

    };
}

#endif // OSGEARTH_COMPOSITING_H
