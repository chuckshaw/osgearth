/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_UTIL_FORMATTERS_H
#define OSGEARTH_UTIL_FORMATTERS_H

#include <osgEarthUtil/Common>
#include <osgEarth/Units>

namespace osgEarth { namespace Util
{
    class OSGEARTHUTIL_EXPORT CoordFormatter
    {
    public:
        enum AngularFormat {
            FORMAT_DECIMAL_DEGREES,
            FORMAT_DEGREES_DECIMAL_MINUTES,
            FORMAT_DEGREES_MINUTES_SECONDS
        };

        enum Options {
            USE_SYMBOLS     = 1 << 0,   // whether to use symbols (e.g., ° ' ")
            USE_COLONS      = 1 << 1,   // whether to separate components with colons
            USE_SPACES      = 1 << 2    // whether to separate components with spaces
        };

    public:
        CoordFormatter( const Options& options =USE_SYMBOLS );

        /**
         * Sets the output precision for decimal numbers  (default is 4)
         */
        void setPrecision( int value ) { _prec = value; }

        /**
         * Sets the formatting options
         */
        void setOptions( const Options& options ) { _options = options; }

        /** 
         * Formats an angle into one of the supported angular formats
         */
        std::string format( const Angular& angle, const AngularFormat& format );

        /**
         * Parses a string into an angle (returning false if parsing fails).
         */
        bool parseAngle( const std::string& input, Angular& out_value );

    protected:
        Options _options;
        int     _prec;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTH_UTIL_FORMATTERS_H
