/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNOTATION_TRACK_NODE_H
#define OSGEARTH_ANNOTATION_TRACK_NODE_H 1

#include <osgEarthAnnotation/LocalizedNode>
#include <osgEarthSymbology/TextSymbol>
#include <osgEarth/MapNode>
#include <osg/Image>

namespace osgEarth { namespace Annotation
{	
    using namespace osgEarth;
    using namespace osgEarth::Symbology;

    typedef std::map<std::string, osg::ref_ptr<const TextSymbol> > TrackNodeFieldSchema;

#if 0
    class OSGEARTHANNO_EXPORT TrackNodeFieldSchema : public osg::Referenced 
    {
    public:
        typedef std::map<std::string, osg::ref_ptr<const TextSymbol> > SymbolMap;

    public:
        TrackNodeFieldSchema();

        void insert( const std::string& name, const TextSymbol* symbol );

        const TextSymbol* get( const std::string& name ) const;

        const SymbolMap& getSymbolMap() const { return _symbolMap; }

    protected:
        SymbolMap _symbolMap;
    };
#endif

    /** 
     * TrackNode is a movable, single-point entity represented by an icon,
     * optional placeable text labels, and optional localized geometry.
     */
    class OSGEARTHANNO_EXPORT TrackNode : public OrthoNode
    {
    public:
        TrackNode(
            MapNode*                    mapNode,
            const osg::Vec3d&           position,
            osg::Image*                 image,
            const TrackNodeFieldSchema& fieldSchema );

        /** 
         * Sets the value of one of the field labels.
         * @param name  Field name as identified in the field schema.
         * @param value Value to which to set the field label.
         */
        void setFieldValue( const std::string& name, const std::string& value );

    protected:
        osg::ref_ptr<osg::Image>                 _image;
        //osg::ref_ptr<const TrackNodeFieldSchema> _fieldSchema;

        typedef std::map<std::string, osg::Drawable*> FieldDrawables;
        FieldDrawables _fieldDrawables;

        void init( const TrackNodeFieldSchema& schema );
    };

} } // namespace osgEarth::Annotation

#endif //OSGEARTH_ANNOTATION_TRACK_NODE_H
