/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNO_ORTHO_NODE_H
#define OSGEARTH_ANNO_ORTHO_NODE_H 1

#include <osgEarthAnnotation/AnnotationNode>
#include <osgEarth/SpatialReference>
#include <osg/AutoTransform>
#include <osg/MatrixTransform>

namespace osgEarth { namespace Annotation
{	
    using namespace osgEarth;

    /**
     * Base class for an annotation node that it drawn in screen-space
     * (as an orthographic overlay)
     */
    class OSGEARTHANNO_EXPORT OrthoNode : public AnnotationNode
    {
    public:
        META_AnnotationNode( osgEarthAnnotation, OrthoNode );

        /**
         * Constructs an relative-position ortho node
         */
        OrthoNode();

        /**
         * Constructs an ortho node that resides at an absolute position on the map
         */
        OrthoNode( const SpatialReference* mapSRS, const osg::Vec3d& position );

        /**
         * Attaches a child node to the transforms. Use this instead of addChild.
         */
        virtual osg::Group* getAttachPoint() { return _attachPoint; }

    public:
        /**
         * Sets the map position of the node. The coordinates are in the SRS
         * of the current Map. Returns true upon success.
         */
        bool setPosition( const osg::Vec3d& pos );

        /**
         * Sets the map position of the node. The coordinates are in the SRS
         * passed in, and will be reprojected to Map coordinates.
         * Returns true upon success.
         */
        bool setPosition( const osg::Vec3d& pos, const SpatialReference* srs );

        /**
         * Gets the position (in map coordinates) of the node
         */
        osg::Vec3d getPosition() const;

        /**
         * Gets the position (in the requested coordinate system)
         */
        osg::Vec3d getPosition( const SpatialReference* srs ) const;

        /**
         * Enables or disable automatic horizon culling
         */
        void setHorizonCulling( bool value );
        bool getHorizonCulling() const;

    public: // osg::Node

        virtual void traverse( osg::NodeVisitor& nv );

    private:
        osg::observer_ptr<const SpatialReference> _mapSRS;
        osg::AutoTransform*   _autoxform;
        osg::MatrixTransform* _matxform;
        osg::Group*           _attachPoint;
        bool                  _horizonCulling;

        void init();

        // required by META_Node, but this object is not cloneable
        OrthoNode( const OrthoNode& rhs, const osg::CopyOp& op =osg::CopyOp::DEEP_COPY_ALL ) { }
    };

} } // namespace osgEarth::Annotation

#endif // OSGEARTH_ANNO_LOCALIZED_NODE_H
