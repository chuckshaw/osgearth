/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNOTATION_DECLUTTER_RENDER_BIN_H
#define OSGEARTH_ANNOTATION_DECLUTTER_RENDER_BIN_H 1

#include <osgEarthAnnotation/Common>
#include <osg/Drawable>

/**
 * To apply the "decluttering" algorithm to a subgraph, call
 *
 * Node->getOrCreateStateSet()->setRenderBinDetails( binNumber, OSGEARTH_DECLUTTER_BIN )
 */

#define OSGEARTH_DECLUTTER_BIN "declutter"

namespace osgEarth { namespace Annotation 
{
    /**
     * Custom functor that compares two RenderLeaf's and returns TRUE if the left-hand one
     * is higher priority, otherwise FALSE. You can call setDeclutterPriorityFunctor()
     * to set a custom priority-sorting functor.
     */
    struct DeclutterSortFunctor : public osg::Referenced
    {
        virtual bool operator() ( const osgUtil::RenderLeaf* lhs, const osgUtil::RenderLeaf* rhs ) const =0;
    };

    /**
     * A decluttering functor that sorts by the priority field in AnnotationData.
     * AnnotationData should be attached to each Drawable's user data.
     */
    struct OSGEARTHANNO_EXPORT DeclutterByPriority : public DeclutterSortFunctor
    {
        virtual bool operator()(const osgUtil::RenderLeaf* lhs, const osgUtil::RenderLeaf* rhs ) const;
    };

    /**
     * Options to control the annotation decluttering engine.
     */
    class /*header-only*/ DeclutteringOptions
    {
    public:
        DeclutteringOptions()
            : _minAlpha         ( 0.35f ),
              _minScale         ( 0.45f ),
              _maxScale         ( 1.00f ),
              _stepDown         ( 0.05f ),
              _stepUp           ( 0.05f )
        {
            //nop
        }

        optional<float>& minAlpha() { return _minAlpha; }
        const optional<float>& minAlpha() const { return _minAlpha; }

        optional<float>& minScale() { return _minScale; }
        const optional<float>& minScale() const { return _minScale; }

        // not yet implemented
        optional<float>& maxScale() { return _maxScale; }
        const optional<float>& maxScale() const { return _maxScale; }

        optional<float>& stepDown() { return _stepDown; }
        const optional<float>& stepDown() const { return _stepDown; }

        optional<float>& stepUp() { return _stepUp; }
        const optional<float>& stepUp() const { return _stepUp; }


    protected:
        optional<float> _minAlpha;
        optional<float> _minScale;
        optional<float> _maxScale;
        optional<float> _stepDown;
        optional<float> _stepUp;
    };

    struct OSGEARTHANNO_EXPORT Decluttering
    {
        /**
         * Activates decluttering on a stateset.
         */
        static void setEnabled( osg::StateSet* stateSet, bool enabled, int binNum =INT_MAX );

        /**
         * Sets a functor to use to determine render leaf priority for declutter sorting.
         */
        static void setSortFunctor( DeclutterSortFunctor* f );

        /**
         * Clears a custom priority functor that was set using setDeclutterPriorityFunctor,
         * reverting to the default behavior (which is to sort by distance from the camera).
         */
        static void clearSortFunctor();

        /**
         * Applies the provided options to the decluttering engine.
         */
        static void setOptions( const DeclutteringOptions& options );

        /**
         * Fetches the current decluttering options
         */
        static const DeclutteringOptions& getOptions();
    };

} } // namespace osgEarth::Annotation

#endif //OSGEARTH_ANNOTATION_DECLUTTER_RENDER_BIN_H
