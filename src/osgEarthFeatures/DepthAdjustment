/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_DEPTH_ADJUSTMENT_H
#define OSGEARTHFEATURES_DEPTH_ADJUSTMENT_H 1

#include <osgEarthFeatures/Common>
#include <osg/Program>

namespace osgEarth { namespace Features
{
    using namespace osgEarth;

    /**
     * Utilities to manage depth testing for feature data. Handy especially
     * for terrain-conforming lines.
     */
    class OSGEARTHFEATURES_EXPORT DepthAdjustment
    {
    public:
        /**
         * Creates a uniform that will configure the depth adjustment program.
         * The value of the uniform is the minimum depth offset applied to 
         * geometry under the program's stateset. If you pass in a graph, it
         * will analyze it and attempt to come up with a reasonable default
         * minimum offset.
         */
        static osg::Uniform* createUniform( osg::Node* graphToAdjust =0L );

        /**
         * Creates a complete shader program that you can use to implement vertex
         * depth adjustment. Use createUniform() to make a uniform for tweaking
         * the depth offset value.
         */
        static osg::Program* getOrCreateProgram();

        /**
         * Returns a program that statically performs a depth adjustment using the
         * offset specified. This program does not use a uniform, it just hard-
         * codes the minimum offset.
         */
        static osg::Program* getOrCreateProgram( float staticMinimumOffset );

        /**
         * Creates the source for a depth adjustment vertex shader. Use this instead
         * of createProgram() if you want you are using the shader composition framework.
         * You can install this in any FunctionLocation.
         */
        static std::string createVertexFunction(
            const std::string& funcName ="osgearth_depth_adjustment_vertex" );

        /**
         * Creates the source for a depth adjustment fragment shader. Use this instead
         * of createProgram() if you want you are using the shader composition framework.
         * You can install this in any FunctionLocation.
         */
        static std::string createFragmentFunction(
            const std::string& funcName ="osgearth_depth_adjustment_fragment" );
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_CENTROID_FILTER_H
