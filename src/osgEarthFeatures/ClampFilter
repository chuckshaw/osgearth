/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_CLAMP_FILTER_H
#define OSGEARTHFEATURES_CLAMP_FILTER_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/Filter>

namespace osgEarth { namespace Features
{
    using namespace osgEarth;

    /**
     * Feature filter that will clamp incoming feature geometry to an elevation model.
     */
    class OSGEARTHFEATURES_EXPORT ClampFilter : public FeatureFilter
    {
    public:
        /** Constructs a new clamping filter */        
        ClampFilter();

        /** Whether to consider the pre-existing Z coordinate when clamping (default=false) */
        void setIgnoreZ( bool value ) { _ignoreZ = value; }
        bool getIgnoreZ() const { return _ignoreZ; }

        void setOffsetZ( double value ) { _offsetZ = value; }
        double getOffsetZ() const { return _offsetZ; }

        void setScaleZ( double value ) { _scaleZ = value; }
        double getScaleZ() const { return _scaleZ; }

        /** Maximum terrain resolution to consider when clamping */
        void setMaxResolution( double value ) { _maxRes = value; }
        double getMaxResolution() const { return _maxRes; }

        /** Sets the attribute name to which to write the maximum clamped Z value. */
        void setMaxZAttributeName( const std::string& value ) { _maxZAttrName = value; }

    public:
        virtual FilterContext push( FeatureList& input, FilterContext& cx );

    protected:
        bool _ignoreZ;
        double _offsetZ, _scaleZ;
        double _maxRes;
        std::string _maxZAttrName;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_CLAMP_FILTER_H
